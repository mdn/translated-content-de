name: Lint and review content files

on:
  pull_request_target:
    branches:
      - main
    paths:
      - "**/*.md"

permissions:
  pull-requests: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  lint-and-review-docs:
    # do not run on PRs in forks
    if: github.repository == 'mdn/translated-content-de'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout BASE
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Get changed files
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          # Use the GitHub API to get the list of changed files
          # documentation: https://docs.github.com/rest/commits/commits#compare-two-commits

          # Get files as newline-separated list
          FILTERED_FILES=$(gh api repos/{owner}/{repo}/compare/${BASE_SHA}...${HEAD_SHA} \
            --jq '.files | .[] | select(.status|IN("added", "modified", "renamed", "copied", "changed")) | .filename' | \
            egrep -i "^files/.*\.md$")

          # Store as multiline output
          EOF="$(openssl rand -hex 8)"
          echo "DIFF_DOCUMENTS<<${EOF}" >> "$GITHUB_OUTPUT"
          echo "${FILTERED_FILES}" >> "$GITHUB_OUTPUT"
          echo "${EOF}" >> "$GITHUB_OUTPUT"

          # Also set a simple flag for whether we have files
          if [ -n "${FILTERED_FILES// /}" ]; then  # Remove all spaces and check if anything remains
            echo "HAS_FILES=true" >> "$GITHUB_OUTPUT"
          else
            echo "HAS_FILES=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout HEAD
        if: steps.check.outputs.HAS_FILES == 'true'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: pr_head
          persist-credentials: false

      - name: Get changed content from HEAD
        if: steps.check.outputs.HAS_FILES == 'true'
        run: |
          git config --global user.email "108879845+mdn-bot@users.noreply.github.com"
          git config --global user.name "mdn-bot"

          rm -r files docs *.md
          mv pr_head/files pr_head/docs pr_head/*.md .
          rm -r pr_head

          # To avoid contents of PR getting into the diff that we are going to generate
          # after running the linters, here we make a dummy commit.
          # Note, this commit is not getting pushed.
          git add .
          git commit -m "Code from PR head"

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        if: steps.check.outputs.HAS_FILES == 'true'
        with:
          repository: mdn/content
          path: mdn/content
          persist-credentials: false

      - name: Setup Node.js environment
        if: steps.check.outputs.HAS_FILES == 'true'
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: ".nvmrc"
          cache: yarn
          cache-dependency-path: |
            mdn/content/yarn.lock
            yarn.lock

      - name: Install all yarn packages for mdn/translated-content-de
        if: steps.check.outputs.HAS_FILES == 'true'
        run: yarn --frozen-lockfile

      - name: Install all yarn packages for mdn/content
        if: steps.check.outputs.HAS_FILES == 'true'
        working-directory: ${{ github.workspace }}/mdn/content
        run: yarn --frozen-lockfile
        env:
          # https://github.com/microsoft/vscode-ripgrep#github-api-limit-note
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint and format markdown files
        id: lint
        if: steps.check.outputs.HAS_FILES == 'true'
        run: |
          # Generate random delimiter
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          EOF="$(openssl rand -hex 8)"

          # The DIFF_DOCUMENTS env var contains the clean newline-separated list
          # Read into array, one filename per line
          readarray -t files_to_lint <<< "$DIFF_DOCUMENTS"

          # Debug: show what we got
          printf "Files to process (%d files):\n" "${#files_to_lint[@]}"
          printf "'%s'\n" "${files_to_lint[@]}"

          echo "Running markdownlint --fix"
          MD_LINT_FAILED=false
          MD_LINT_LOG=$(yarn markdownlint-cli2 --fix "${files_to_lint[@]}" 2>&1) || MD_LINT_FAILED=true
          echo "MD_LINT_LOG<<${EOF}" >> "$GITHUB_OUTPUT"
          echo "${MD_LINT_LOG}" >> "$GITHUB_OUTPUT"
          echo "${EOF}" >> "$GITHUB_OUTPUT"
          echo "MD_LINT_FAILED=${MD_LINT_FAILED}" >> "$GITHUB_OUTPUT"

          echo "Linting front-matter"
          FM_LINT_FAILED=false
          # absolute_paths is needed because front-matter linter is run from mdn/content directory
          absolute_paths=()
          for file in "${files_to_lint[@]}"; do
              absolute_paths+=("$(realpath -e "$file")")
          done
          FM_LINT_LOG=$(cd ${{ github.workspace }}/mdn/content && yarn fix:fm --config-file ${{ github.workspace }}/.front-matter-config.json "${absolute_paths[@]}" 2>&1) || FM_LINT_FAILED=true
          echo "FM_LINT_LOG<<${EOF}" >> "$GITHUB_OUTPUT"
          echo "${FM_LINT_LOG}" >> "$GITHUB_OUTPUT"
          echo "${EOF}" >> "$GITHUB_OUTPUT"
          echo "FM_LINT_FAILED=${FM_LINT_FAILED}" >> "$GITHUB_OUTPUT"

          echo "Running url locale checker"
          node ./scripts/check-url-locale.js --fix "${files_to_lint[@]}"

          echo "Running autocorrect"
          yarn autocorrect --fix "${files_to_lint[@]}"

          echo "Running Prettier"
          yarn prettier -w "${files_to_lint[@]}"

          if [[ -n $(git diff) ]]; then
            echo "FILES_MODIFIED=true" >> "$GITHUB_OUTPUT"
          fi

          # info for troubleshooting
          echo MD_LINT_FAILED=${MD_LINT_FAILED}
          echo FM_LINT_FAILED=${FM_LINT_FAILED}
          git diff

      - name: Setup reviewdog
        if: steps.lint.outputs.FILES_MODIFIED == 'true' || steps.lint.outputs.MD_LINT_FAILED == 'true'
        uses: reviewdog/action-setup@d8edfce3dd5e1ec6978745e801f9c50b5ef80252 # v1.4.0
        with:
          reviewdog_version: latest

      - name: Suggest changes using diff
        if: steps.lint.outputs.FILES_MODIFIED == 'true'
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TMPFILE=$(mktemp)
          git diff >"${TMPFILE}"
          git stash -u && git stash drop
          reviewdog \
            -name="mdn-linter" \
            -f=diff \
            -f.diff.strip=1 \
            -filter-mode=diff_context \
            -reporter=github-pr-review < "${TMPFILE}"

      - name: Add reviews for markdownlint errors
        if: steps.lint.outputs.MD_LINT_FAILED == 'true'
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${MD_LINT_LOG}" | \
            reviewdog \
            -efm="%f:%l:%c %m" \
            -efm="%f:%l %m" \
            -name="markdownlint" \
            -diff="git diff" \
            -reporter="github-pr-review"

      - name: Fail if any issues pending
        if: steps.lint.outputs.FILES_MODIFIED == 'true' || steps.lint.outputs.MD_LINT_FAILED == 'true' || steps.lint.outputs.FM_LINT_FAILED == 'true'
        run: |
          echo -e "\nLogs from markdownlint:"
          echo "${MD_LINT_LOG}"
          echo -e "\nLogs from front-matter linter:"
          echo "${FM_LINT_LOG}"
          echo -e "\nPlease fix all the linting issues mentioned in above logs and in the review comments."
          exit 1
